#pragma version >=0.2.0;

#include "common/stdlib.func";
#include "common/utils.func";
#include "common/messages.func";
#include "common/jetton-utils.func";

const int OP_CHECK_IN = 2024;
const int OP_UPGRADE = 6008;

() save_data(
int pubKey,
slice owner
) impure inline {
    set_data(begin_cell()
        .store_uint(pubKey, 256)
        .store_slice(owner)
        .end_cell()
    );
}

(int, slice) load_data() {
    var ds = get_data().begin_parse();
    var pub_key = ds~load_uint(256);

    return
    (
        pub_key, ;; pubKey
        ds~load_msg_addr() ;; owner
    );
}

;; msg value: value of ton transfer
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    var cs = in_msg_full.begin_parse();
    var flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee

    force_chain(sender_address);
    (int pubKey, slice owner) = load_data();

    (int op, int query_id) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));

    if (op == OP_CHECK_IN) {
        in_msg_body~load_uint(64);
        in_msg_body~load_uint(64);
        var expired_time = in_msg_body~load_uint(64);

        throw_unless(3600, now() < expired_time);

        save_data(pubKey, owner);

        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(1, 107)
            .store_ref(begin_cell().end_cell())
            .end_cell();

        send_raw_message(msg, CARRY_REMAINING_GAS);
    }

    throw_unless(303, equal_slices(owner, sender_address));

    if (op == OP_UPGRADE) {
        set_code(in_msg_body~load_ref());
        return ();
    }
}

(int, slice) get_info() method_id {
    return load_data();
}

int my_balance() method_id {
    [int res, cell a] = get_balance();
    return res;
}
