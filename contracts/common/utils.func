const FWD_GAS = 35000000; ;; 0.04 TON
const int SEND_MODE_REGULAR = 0;
#include "stdlib.func";

() send_payload(slice caller, cell payload) impure inline_ref {
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(caller)
        .store_coins(0)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(payload)
        .end_cell();
    send_raw_message(msg, 128); ;; CARRY_ALL_BALANCE
}

() emit_log_simple(int event_id, cell data, int need_separate_cell) impure inline {
    ;; 1023 - (4+2+9+256+64+32+2) = 654 bit free

    var msg = begin_cell()
        .store_uint(12, 4)         ;; ext_out_msg_info$11 src:MsgAddressInt ()
        .store_uint(1, 2)          ;; addr_extern$01
        .store_uint(256, 9)        ;; len:(## 9)
        .store_uint(event_id, 256); ;; external_address:(bits len)

    if (need_separate_cell) {
        msg = msg.store_uint(1, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either
            .store_ref(data);
    } else {
        msg = msg.store_uint(0, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either
            .store_slice(data.begin_parse());
    }

    send_raw_message(msg.end_cell(), SEND_MODE_REGULAR);
}

(slice) convert_int_to_string(int n) {
    builder string = begin_cell();
    tuple chars = null();
    do {
        int r = n~divmod(10);
        chars = cons(r + 48, chars);
    } until (n == 0);
    do {
        int char = chars~list_next();
        string~store_uint(char, 8);
    } until (null?(chars));

    return string.end_cell().begin_parse();
}
